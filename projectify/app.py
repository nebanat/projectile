from flask import Flask, jsonify
from projectify.extensions import db
from projectify.blueprints.user.views import user
from projectify.blueprints.project.views import project
from projectify.blueprints.category.views import category
from flask_jwt import JWT
from security import authenticate, identity as identity_function


def create_app(settings_override=None):
    """
    Creates a new flask application using the factories pattern

    :return: an flask app
    """
    app = Flask(__name__)

    app.config.from_object('config.settings')
    app.config.from_pyfile('settings.py', silent=True)

    if settings_override:
        app.config.update(settings_override)

    @app.route('/')
    def index():
        return 'Welcome to projectify api'

    # registers blueprint
    app.register_blueprint(user)
    app.register_blueprint(project)
    app.register_blueprint(category)

    # plugs app to all configuration
    configure_jwt(app)
    extensions(app)

    return app


def configure_jwt(app):
    jwt = JWT(app, authenticate, identity_function)  # creates an endpoint /login

    @jwt.auth_response_handler
    def customized_response_handler(access_token, identity):
        """
        This method overrides the default response returned
        by flask-jwt by adding success message

        :param access_token: token generated by flask-jwt
        :param identity: current user identity
        :return: message and access_token
        """
        return jsonify({
            'message': 'Login successful',
            'access_token': access_token.decode('utf-8')
        })

    return jwt


def extensions(app):
    """
    Register all extensions (mutates the app passed into it)

    :param app:
    :return: None
    """
    db.init_app(app)

    return None
